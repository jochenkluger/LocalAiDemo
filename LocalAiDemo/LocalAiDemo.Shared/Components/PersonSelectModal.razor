@using LocalAiDemo.Shared.Models
@using Microsoft.Extensions.Logging
@inject ILogger<PersonSelectModal> Logger

<div class="modal @(_isVisible ? "modal-visible" : "")">
    <div class="modal-backdrop" @onclick="CloseModal"></div>
    <div class="modal-content">
        <div class="modal-header">
            <h3>Neuer Chat</h3>
            <button type="button" class="close-button" @onclick="CloseModal">&times;</button>
        </div>
        <div class="modal-body">
            <div class="person-list">                
                @if (Persons != null && Persons.Any())
                {
                    @foreach (var person in Persons)
                    {
                        var isSelected = SelectedPerson != null && SelectedPerson.Id == person.Id;
                        <div class="person-item @(isSelected ? "selected" : "")" @onclick="() => SelectPerson(person)">
                            <div class="person-avatar">
                                @if (!string.IsNullOrEmpty(person.AvatarUrl))
                                {
                                    <img src="@person.AvatarUrl" alt="@person.Name" />
                                }
                                else
                                {
                                    <div class="avatar-placeholder">
                                        @person.Name[0]
                                    </div>
                                }
                                @{
                                    var statusClass = person.Status.Replace(" ", "-").ToLowerInvariant();
                                }
                                <span class="status-indicator @statusClass"></span>
                            </div>
                            <div class="person-info">
                                <div class="person-name">@person.Name</div>
                                <div class="person-department">@person.Department</div>
                            </div>
                            <div class="person-status">
                                @GetStatusText(person)
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state">
                        <p>Keine Kontakte gefunden.</p>
                    </div>
                }
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Abbrechen</button>
            <button type="button" class="btn btn-primary" @onclick="ConfirmSelection" disabled="@(SelectedPerson == null)">Chat starten</button>
        </div>
    </div>
</div>

@code {
    private bool _isVisible = false;
      [Parameter]
    public List<Person> Persons { get; set; } = new List<Person>();
    
    [Parameter]
    public EventCallback<Person> OnPersonSelected { get; set; }
    
    [Parameter]
    public EventCallback OnCancelled { get; set; }
    
    public Person? SelectedPerson { get; private set; }    public void Show()
    {
        Logger.LogDebug("PersonSelectModal - Show() called");
        _isVisible = true;
        SelectedPerson = null; // Reset selection
        StateHasChanged();
    }
    
    public void Hide()
    {
        _isVisible = false;
        StateHasChanged();
    }
    
    private void CloseModal()
    {
        Hide();
        OnCancelled.InvokeAsync();
    }    private void SelectPerson(Person person)
    {
        // If the person is already selected, deselect them (toggle behavior)
        if (SelectedPerson != null && SelectedPerson.Id == person.Id)
        {
            SelectedPerson = null;
        }
        else
        {
            SelectedPerson = person;
        }
          // Force UI refresh
        StateHasChanged();
        Logger.LogDebug("Person selection: {Selection}", 
            (SelectedPerson != null ? $"Selected {SelectedPerson.Name} (ID: {SelectedPerson.Id})" : "No selection"));
    }      private async Task ConfirmSelection()
    {
        try
        {
            if (SelectedPerson != null)
            {
                Logger.LogDebug("PersonSelectModal - Confirming selection of {PersonName} (ID: {PersonId})", 
                    SelectedPerson.Name, SelectedPerson.Id);
                
                // Store the selected person locally to ensure it's not lost during async operations
                var person = SelectedPerson;
                
                try
                {
                    // Add more detailed logging before invoking the callback
                    Logger.LogDebug("PersonSelectModal - Invoking OnPersonSelected callback");
                    
                    // Track if we have any subscribers to the event
                    if (OnPersonSelected.HasDelegate)
                    {
                        Logger.LogDebug("PersonSelectModal - OnPersonSelected has subscribers");
                        
                        // Hide the modal before invoking the callback to prevent UI conflicts
                        _isVisible = false;
                        await InvokeAsync(StateHasChanged);
                        
                        // Invoke the callback with the stored person
                        await OnPersonSelected.InvokeAsync(person);
                        
                        Logger.LogDebug("PersonSelectModal - OnPersonSelected callback completed");
                    }
                    else
                    {
                        Logger.LogWarning("PersonSelectModal - OnPersonSelected has NO subscribers!");
                        Hide();
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "PersonSelectModal - Error in ConfirmSelection: {ErrorMessage}", ex.Message);
                    Hide();
                }
            }
            else
            {
                Logger.LogDebug("PersonSelectModal - Cannot confirm: No person selected");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "PersonSelectModal - Unexpected error in ConfirmSelection: {ErrorMessage}", ex.Message);
            Hide();
        }
    }
    
        private string GetStatusText(Person person)
    {
        if (person.Status.Equals("Online", StringComparison.OrdinalIgnoreCase))
        {
            return "Verfügbar";
        }
        else if (person.Status.Equals("Away", StringComparison.OrdinalIgnoreCase))
        {
            return "Abwesend";
        }
        else if (person.Status.Equals("Do Not Disturb", StringComparison.OrdinalIgnoreCase))
        {
            return "Beschäftigt";
        }
        else
        {
            return $"Zuletzt online: {FormatTime(person.LastSeen)}";
        }
    }
    
    private string FormatTime(DateTime time)
    {
        if (time.Date == DateTime.Now.Date)
        {
            return time.ToString("HH:mm");
        }
        else if (time.Date == DateTime.Now.Date.AddDays(-1))
        {
            return "Gestern";
        }
        else
        {
            return time.ToString("dd.MM.yyyy");
        }
    }
}
