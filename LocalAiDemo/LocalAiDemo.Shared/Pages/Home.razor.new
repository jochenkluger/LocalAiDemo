@page "/"
@using LocalAiDemo.Shared.Services
@using LocalAiDemo.Shared.Models
@using LocalAiDemo.Shared.Components
@using Microsoft.Extensions.Logging
@inject IFormFactor FormFactor
@inject IAiAssistantService AiAssistant
@inject IMeasurementService MeasurementService
@inject IChatDatabaseService ChatDatabase
@inject IChatService ChatService
@inject IEmbeddingService EmbeddingService
@inject ILogger<Home> Logger
@implements IDisposable

<PageTitle>Chat Demo</PageTitle>
<link rel="stylesheet" href="_content/LocalAiDemo.Shared/chat.css" />
<link rel="stylesheet" href="_content/LocalAiDemo.Shared/modal.css" />

<div class="chat-container">
    <!-- Left Column - Chat List -->
    <div class="chat-list">
        <h2>Chats</h2>
        <div class="search-box">
            <input type="text" placeholder="Suche..." @bind="searchQuery" @bind:event="oninput" @onkeyup="SearchChats" />
        </div>
        <div class="chat-items">
            @foreach (var chat in displayedChats)
            {
                <div class="chat-item @(chat.Id == selectedChatId ? "active" : "")" @onclick="() => SelectChat(chat.Id)">
                    <div class="person-avatar small">
                        @if (chat.Person != null && !string.IsNullOrEmpty(chat.Person.AvatarUrl))
                        {
                            <img src="@chat.Person.AvatarUrl" alt="@chat.Person.Name" />
                        }
                        else
                        {
                            <div class="avatar-placeholder">
                                @(chat.Person?.Name.FirstOrDefault() ?? 'U')
                            </div>
                        }
                        <span class="status-indicator @(chat.Person?.Status?.ToLower() ?? "offline")"></span>
                    </div>
                    <div class="chat-details">
                        <div class="chat-title">@(chat.Person?.Name ?? chat.Title)</div>
                        <div class="chat-preview">@GetChatPreview(chat)</div>
                        <div class="chat-time">@FormatTime(chat.CreatedAt)</div>
                    </div>
                </div>
            }

            @if (!displayedChats.Any())
            {
                <div class="empty-state">
                    <p>Keine Chats gefunden.</p>
                </div>
            }
        </div>
        <div class="new-chat-button">
            <button @onclick="@(async () => await ShowPersonSelectModal())">Neuer Chat</button>
        </div>
    </div>
    
    <!-- Middle Column - Current Chat -->
    <div class="current-chat">
        <ChatView 
            @ref="chatViewComponent" 
            CurrentChat="@selectedChat" 
            OnChatUpdated="@HandleChatUpdated" />
    </div>

    <!-- Right Column - AI Assistant -->
    <div class="ai-assistant">
        <h2>KI Assistent</h2>
        <div class="assistant-content">
            <div class="assistant-info">
                <div class="assistant-avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="assistant-name">@AiAssistant.GetAssistantName()</div>
                <div class="assistant-status @(AiAssistant.IsOnline() ? "online" : "offline")">
                    @(AiAssistant.IsOnline() ? "Online" : "Offline")
                </div>
            </div>
            <div class="assistant-capabilities">
                <h3>Funktionen:</h3>
                <ul>
                    @foreach (var capability in AiAssistant.GetCapabilities())
                    {
                        <li>
                            <i class="@GetIconForCapability(capability)"></i> @capability
                        </li>
                    }
                </ul>
            </div>
            <div class="assistant-actions">
                <button class="action-button"><i class="bi bi-mic"></i> Sprechen</button>
                <button class="action-button"><i class="bi bi-gear"></i> Einstellungen</button>
            </div>
        </div>
    </div>
</div>

<!-- Status Bar for Measurements -->
<div class="status-bar">
    @foreach (var measurement in measurements)
    {
        <div class="status-item">
            <i class="@GetIconForMeasurement(measurement.Name)"></i>
            @measurement.Name: @Math.Round(measurement.Value, 1)@measurement.Unit
        </div>
    }
</div>

<!-- Person Select Modal -->
<PersonSelectModal @ref="personSelectModal"
                   Persons="availablePersons"
                   OnPersonSelected="OnPersonSelected"
                   OnCancelled="OnModalCancelled" />

@code {
    private string factor => FormFactor.GetFormFactor();
    private string platform => FormFactor.GetPlatform();
    private PersonSelectModal? personSelectModal;
    private ChatView? chatViewComponent;
    private string searchQuery = "";

    // Database-backed data
    private List<Chat> chats = new List<Chat>();
    private List<Chat> displayedChats = new List<Chat>();
    private List<Person> availablePersons = new List<Person>();
    
    // Measurements from service
    private List<Measurement> measurements = new List<Measurement>();
    private int selectedChatId = 0;
    private Chat? selectedChat => chats.FirstOrDefault(c => c.Id == selectedChatId);  // Keep as computed property for consistency

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogDebug("Home.OnInitializedAsync starting");

            // Initialize the database
            Logger.LogDebug("Initializing database...");
            await ChatDatabase.InitializeDatabaseAsync();
            Logger.LogDebug("Database initialized");

            // Load chats
            Logger.LogDebug("Loading chats...");
            chats = await ChatDatabase.GetAllChatsAsync();
            displayedChats = chats.ToList();
            Logger.LogDebug("Loaded {ChatCount} chats", chats.Count);

            // Load available persons
            Logger.LogDebug("Loading persons...");
            availablePersons = await ChatDatabase.GetAllPersonsAsync();
            Logger.LogDebug("Loaded {PersonCount} persons", availablePersons.Count);

            // Select the first chat if available
            if (chats.Any())
            {
                selectedChatId = chats.First().Id;
                Logger.LogDebug("Selected chat ID: {ChatId}", selectedChatId);
            }

            // Get initial measurements
            Logger.LogDebug("Getting initial measurements...");
            measurements = MeasurementService.GetMeasurements();
            Logger.LogDebug("Found {MeasurementCount} measurements", measurements.Count);

            // Log measurements
            foreach (var m in measurements)
            {
                Logger.LogDebug("Measurement: {Name}={Value}{Unit}", m.Name, m.Value.ToString("F1"), m.Unit);
            }

            // Subscribe to measurement updates
            Logger.LogDebug("Subscribing to measurement updates");
            MeasurementService.MeasurementsUpdated += OnMeasurementsUpdated;
            Logger.LogDebug("Home.OnInitializedAsync completed");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in OnInitializedAsync: {ErrorMessage}", ex.Message);
        }
    }

    public void Dispose()
    {
        // Unsubscribe from events when component is disposed
        MeasurementService.MeasurementsUpdated -= OnMeasurementsUpdated;
    }
    
    private void OnMeasurementsUpdated(object? sender, List<Measurement> updatedMeasurements)
    {
        if (updatedMeasurements == null || updatedMeasurements.Count == 0)
        {
            Logger.LogDebug("Received empty measurements update");
            return;
        }

        Logger.LogDebug("Received measurement update with {Count} items: {Items}", 
            updatedMeasurements.Count, 
            string.Join(", ", updatedMeasurements.Select(m => $"{m.Name}={m.Value:F1}")));
            
        measurements = new List<Measurement>(updatedMeasurements); // Create a new list to ensure UI update
        InvokeAsync(() =>
        {
            try
            {
                Logger.LogDebug("Updating UI with new measurements");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error updating UI: {ErrorMessage}", ex.Message);
            }
        });
    }

    private async Task SelectChat(int chatId)
    {
        Logger.LogInformation("SelectChat called with chatId={ChatId}", chatId);
        selectedChatId = chatId;
        
        // Make sure we have the latest data
        var chat = await ChatDatabase.GetChatAsync(chatId);
        
        if (chat != null)
        {
            Logger.LogInformation("Retrieved chat: id={ChatId}, Title={Title}, Messages={Count}", 
                chat.Id, chat.Title, chat.Messages.Count);
                
            // Update the chat in our list
            var index = chats.FindIndex(c => c.Id == chatId);
            if (index >= 0)
            {
                chats[index] = chat;
                Logger.LogInformation("Updated chat in list at index {Index}", index);
            }
            else
            {
                Logger.LogWarning("Chat {ChatId} not found in chat list!", chatId);
                // Add it to the list as it should be there
                chats.Insert(0, chat);
                Logger.LogInformation("Added chat to list");
            }
            
            // Force UI update
            await InvokeAsync(StateHasChanged);
            Logger.LogInformation("UI updated after chat selection");
            
            // Notify the ChatView component that the chat has changed
            if (chatViewComponent != null)
            {
                chatViewComponent.ChatUpdated();
            }
        }
        else
        {
            Logger.LogWarning("Selected chat {ChatId} not found in database", chatId);
        }
    }
    
    private async Task ShowPersonSelectModal()
    {
        // Reload persons list before showing the modal
        Logger.LogDebug("Reloading persons before showing modal");
        try
        {
            availablePersons = await ChatDatabase.GetAllPersonsAsync();
            Logger.LogDebug("Reloaded {PersonCount} persons", availablePersons.Count);

            if (availablePersons.Count == 0)
            {
                Logger.LogDebug("No persons found, attempting to reinitialize database");
                await ChatDatabase.InitializeDatabaseAsync();
                availablePersons = await ChatDatabase.GetAllPersonsAsync();
                Logger.LogDebug("After reinitialization: {PersonCount} persons", availablePersons.Count);
            }
            
            // Make sure the modal exists
            if (personSelectModal == null)
            {
                Logger.LogWarning("personSelectModal is null!");
                return;
            }
            
            // Show the modal
            Logger.LogDebug("Showing person select modal");
            personSelectModal.Show();
            
            // Force UI update
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in ShowPersonSelectModal: {ErrorMessage}", ex.Message);
        }
    }
    
    private async Task OnPersonSelected(Person person)
    {
        try
        {
            Logger.LogInformation("Home.OnPersonSelected - Called with person: {PersonName} (ID: {PersonId})", 
                person?.Name ?? "null", person?.Id ?? 0);
            
            if (person == null)
            {
                Logger.LogError("Home.OnPersonSelected - Received null person!");
                return;
            }
            
            // Use ChatService to create a new chat with the selected person
            Logger.LogInformation("Creating new chat with person {PersonId} ({PersonName})", person.Id, person.Name);
            var newChat = await ChatService.CreateNewChatAsync(person);
            
            Logger.LogInformation("New chat created with ID: {ChatId}", newChat.Id);
            
            // Add to our list and select it
            chats.Insert(0, newChat);
            displayedChats = new List<Chat>(chats);
            
            // Explicitly select the chat
            await SelectChat(newChat.Id);
            
            // Force UI update
            await InvokeAsync(StateHasChanged);
            Logger.LogInformation("UI updated with new chat");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in OnPersonSelected: {ErrorMessage}", ex.Message);
            StateHasChanged();
        }
    }

    private void OnModalCancelled()
    {
        // Nothing to do
    }

    private void SearchChats()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            displayedChats = chats.ToList();
        }
        else
        {
            var query = searchQuery.ToLower();
            displayedChats = chats
                .Where(c =>
                    (c.Title?.ToLower().Contains(query) ?? false) ||
                    (c.Person?.Name.ToLower().Contains(query) ?? false) ||
                    c.Messages.Any(m => m.Content.ToLower().Contains(query)))
                .ToList();
        }
    }

    private string GetChatPreview(Chat chat)
    {
        var lastMessage = chat.Messages.OrderByDescending(m => m.Timestamp).FirstOrDefault();
        return lastMessage?.Content ?? "";
    }

    private string FormatTime(DateTime time)
    {
        if (time.Date == DateTime.Now.Date)
        {
            return time.ToString("HH:mm");
        }
        else if (time.Date == DateTime.Now.Date.AddDays(-1))
        {
            return "Gestern";
        }
        else
        {
            return time.ToString("dd.MM.yyyy");
        }
    }

    private string GetIconForCapability(string capability)
    {
        return capability switch
        {
            "Textgenerierung" => "bi bi-chat-dots",
            "Übersetzung" => "bi bi-translate",
            "Informationen" => "bi bi-lightbulb",
            "Code-Hilfe" => "bi bi-code-square",
            _ => "bi bi-gear"
        };
    }

    private string GetIconForMeasurement(string measurementName)
    {
        return measurementName switch
        {
            "CPU-Auslastung" => "bi bi-cpu",
            "Speichernutzung" => "bi bi-memory",
            "Netzwerkverkehr" => "bi bi-speedometer",
            "Latenz" => "bi bi-clock",
            "Temperatur" => "bi bi-thermometer-half",
            _ => "bi bi-graph-up"
        };
    }

    // Handle chat updates from ChatView component
    private async Task HandleChatUpdated(Chat updatedChat)
    {
        Logger.LogInformation("HandleChatUpdated called with chat: {ChatId}", updatedChat.Id);
        
        // Update the chat in our list
        var index = chats.FindIndex(c => c.Id == updatedChat.Id);
        if (index >= 0)
        {
            chats[index] = updatedChat;
            Logger.LogInformation("Updated chat in list at index {Index}", index);
        }
        
        // Make sure displayedChats is updated too (in case of search filtering)
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            displayedChats = chats.ToList();
        }
        else
        {
            SearchChats();
        }
        
        // Force UI update
        await InvokeAsync(StateHasChanged);
    }
}
